#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumaneSocietyProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HumanSociety")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdopter(Adopter instance);
    partial void UpdateAdopter(Adopter instance);
    partial void DeleteAdopter(Adopter instance);
    partial void InsertAnimalType(AnimalType instance);
    partial void UpdateAnimalType(AnimalType instance);
    partial void DeleteAnimalType(AnimalType instance);
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertFoodType(FoodType instance);
    partial void UpdateFoodType(FoodType instance);
    partial void DeleteFoodType(FoodType instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::HumaneSocietyProject.Properties.Settings.Default.HumanSocietyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adopter> Adopters
		{
			get
			{
				return this.GetTable<Adopter>();
			}
		}
		
		public System.Data.Linq.Table<AnimalType> AnimalTypes
		{
			get
			{
				return this.GetTable<AnimalType>();
			}
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<FoodType> FoodTypes
		{
			get
			{
				return this.GetTable<FoodType>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adopter")]
	public partial class Adopter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdopterID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _StreetAddress;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Phone;
		
		private System.DateTime _DOB;
		
		private string _AdopterUserName;
		
		private string _AdopterPassword;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdopterIDChanging(int value);
    partial void OnAdopterIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnAdopterUserNameChanging(string value);
    partial void OnAdopterUserNameChanged();
    partial void OnAdopterPasswordChanging(string value);
    partial void OnAdopterPasswordChanged();
    #endregion
		
		public Adopter()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdopterID
		{
			get
			{
				return this._AdopterID;
			}
			set
			{
				if ((this._AdopterID != value))
				{
					this.OnAdopterIDChanging(value);
					this.SendPropertyChanging();
					this._AdopterID = value;
					this.SendPropertyChanged("AdopterID");
					this.OnAdopterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterUserName", DbType="VarChar(20)")]
		public string AdopterUserName
		{
			get
			{
				return this._AdopterUserName;
			}
			set
			{
				if ((this._AdopterUserName != value))
				{
					this.OnAdopterUserNameChanging(value);
					this.SendPropertyChanging();
					this._AdopterUserName = value;
					this.SendPropertyChanged("AdopterUserName");
					this.OnAdopterUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterPassword", DbType="VarChar(20)")]
		public string AdopterPassword
		{
			get
			{
				return this._AdopterPassword;
			}
			set
			{
				if ((this._AdopterPassword != value))
				{
					this.OnAdopterPasswordChanging(value);
					this.SendPropertyChanging();
					this._AdopterPassword = value;
					this.SendPropertyChanged("AdopterPassword");
					this.OnAdopterPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Animal", Storage="_Animals", ThisKey="AdopterID", OtherKey="AdopterID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Adopter = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Adopter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimalType")]
	public partial class AnimalType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnimalTypeID;
		
		private string _TypeOfAnimal;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnimalTypeIDChanging(int value);
    partial void OnAnimalTypeIDChanged();
    partial void OnTypeOfAnimalChanging(string value);
    partial void OnTypeOfAnimalChanged();
    #endregion
		
		public AnimalType()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnimalTypeID
		{
			get
			{
				return this._AnimalTypeID;
			}
			set
			{
				if ((this._AnimalTypeID != value))
				{
					this.OnAnimalTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalTypeID = value;
					this.SendPropertyChanged("AnimalTypeID");
					this.OnAnimalTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfAnimal", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TypeOfAnimal
		{
			get
			{
				return this._TypeOfAnimal;
			}
			set
			{
				if ((this._TypeOfAnimal != value))
				{
					this.OnTypeOfAnimalChanging(value);
					this.SendPropertyChanging();
					this._TypeOfAnimal = value;
					this.SendPropertyChanged("TypeOfAnimal");
					this.OnTypeOfAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalType_Animal", Storage="_Animals", ThisKey="AnimalTypeID", OtherKey="AnimalTypeID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AnimalType = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AnimalType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnimalID;
		
		private string _Name;
		
		private bool _Vaccinated;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<int> _Price;
		
		private bool _Adopted;
		
		private System.Nullable<int> _AdopterID;
		
		private System.Nullable<int> _AnimalTypeID;
		
		private System.Nullable<int> _RoomID;
		
		private System.Nullable<int> _ColorID;
		
		private System.Nullable<int> _FoodTypeID;
		
		private System.Nullable<int> _GenderID;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<Adopter> _Adopter;
		
		private EntityRef<AnimalType> _AnimalType;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<FoodType> _FoodType;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnimalIDChanging(int value);
    partial void OnAnimalIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVaccinatedChanging(bool value);
    partial void OnVaccinatedChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnAdoptedChanging(bool value);
    partial void OnAdoptedChanged();
    partial void OnAdopterIDChanging(System.Nullable<int> value);
    partial void OnAdopterIDChanged();
    partial void OnAnimalTypeIDChanging(System.Nullable<int> value);
    partial void OnAnimalTypeIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnColorIDChanging(System.Nullable<int> value);
    partial void OnColorIDChanged();
    partial void OnFoodTypeIDChanging(System.Nullable<int> value);
    partial void OnFoodTypeIDChanged();
    partial void OnGenderIDChanging(System.Nullable<int> value);
    partial void OnGenderIDChanged();
    #endregion
		
		public Animal()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Adopter = default(EntityRef<Adopter>);
			this._AnimalType = default(EntityRef<AnimalType>);
			this._Color = default(EntityRef<Color>);
			this._FoodType = default(EntityRef<FoodType>);
			this._Gender = default(EntityRef<Gender>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnimalID
		{
			get
			{
				return this._AnimalID;
			}
			set
			{
				if ((this._AnimalID != value))
				{
					this.OnAnimalIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalID = value;
					this.SendPropertyChanged("AnimalID");
					this.OnAnimalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vaccinated", DbType="Bit NOT NULL")]
		public bool Vaccinated
		{
			get
			{
				return this._Vaccinated;
			}
			set
			{
				if ((this._Vaccinated != value))
				{
					this.OnVaccinatedChanging(value);
					this.SendPropertyChanging();
					this._Vaccinated = value;
					this.SendPropertyChanged("Vaccinated");
					this.OnVaccinatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopted", DbType="Bit NOT NULL")]
		public bool Adopted
		{
			get
			{
				return this._Adopted;
			}
			set
			{
				if ((this._Adopted != value))
				{
					this.OnAdoptedChanging(value);
					this.SendPropertyChanging();
					this._Adopted = value;
					this.SendPropertyChanged("Adopted");
					this.OnAdoptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterID", DbType="Int")]
		public System.Nullable<int> AdopterID
		{
			get
			{
				return this._AdopterID;
			}
			set
			{
				if ((this._AdopterID != value))
				{
					if (this._Adopter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdopterIDChanging(value);
					this.SendPropertyChanging();
					this._AdopterID = value;
					this.SendPropertyChanged("AdopterID");
					this.OnAdopterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalTypeID", DbType="Int")]
		public System.Nullable<int> AnimalTypeID
		{
			get
			{
				return this._AnimalTypeID;
			}
			set
			{
				if ((this._AnimalTypeID != value))
				{
					if (this._AnimalType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalTypeID = value;
					this.SendPropertyChanged("AnimalTypeID");
					this.OnAnimalTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int")]
		public System.Nullable<int> ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodTypeID", DbType="Int")]
		public System.Nullable<int> FoodTypeID
		{
			get
			{
				return this._FoodTypeID;
			}
			set
			{
				if ((this._FoodTypeID != value))
				{
					if (this._FoodType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FoodTypeID = value;
					this.SendPropertyChanged("FoodTypeID");
					this.OnFoodTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Int")]
		public System.Nullable<int> GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Payment", Storage="_Payments", ThisKey="AnimalID", OtherKey="AnimalID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Animal", Storage="_Adopter", ThisKey="AdopterID", OtherKey="AdopterID", IsForeignKey=true)]
		public Adopter Adopter
		{
			get
			{
				return this._Adopter.Entity;
			}
			set
			{
				Adopter previousValue = this._Adopter.Entity;
				if (((previousValue != value) 
							|| (this._Adopter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adopter.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Adopter.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._AdopterID = value.AdopterID;
					}
					else
					{
						this._AdopterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Adopter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalType_Animal", Storage="_AnimalType", ThisKey="AnimalTypeID", OtherKey="AnimalTypeID", IsForeignKey=true)]
		public AnimalType AnimalType
		{
			get
			{
				return this._AnimalType.Entity;
			}
			set
			{
				AnimalType previousValue = this._AnimalType.Entity;
				if (((previousValue != value) 
							|| (this._AnimalType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimalType.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._AnimalType.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._AnimalTypeID = value.AnimalTypeID;
					}
					else
					{
						this._AnimalTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AnimalType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Animal", Storage="_Color", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodType_Animal", Storage="_FoodType", ThisKey="FoodTypeID", OtherKey="FoodTypeID", IsForeignKey=true)]
		public FoodType FoodType
		{
			get
			{
				return this._FoodType.Entity;
			}
			set
			{
				FoodType previousValue = this._FoodType.Entity;
				if (((previousValue != value) 
							|| (this._FoodType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodType.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._FoodType.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._FoodTypeID = value.FoodTypeID;
					}
					else
					{
						this._FoodTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FoodType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Animal", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Animal", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Color")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorID;
		
		private string _Color1;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnColor1Changing(string value);
    partial void OnColor1Changed();
    #endregion
		
		public Color()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Color", Storage="_Color1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if ((this._Color1 != value))
				{
					this.OnColor1Changing(value);
					this.SendPropertyChanging();
					this._Color1 = value;
					this.SendPropertyChanged("Color1");
					this.OnColor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Animal", Storage="_Animals", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeFirstName;
		
		private string _EmployeeLastName;
		
		private string _EmployeeUserName;
		
		private string _EmployeePassword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeFirstNameChanging(string value);
    partial void OnEmployeeFirstNameChanged();
    partial void OnEmployeeLastNameChanging(string value);
    partial void OnEmployeeLastNameChanged();
    partial void OnEmployeeUserNameChanging(string value);
    partial void OnEmployeeUserNameChanged();
    partial void OnEmployeePasswordChanging(string value);
    partial void OnEmployeePasswordChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeFirstName
		{
			get
			{
				return this._EmployeeFirstName;
			}
			set
			{
				if ((this._EmployeeFirstName != value))
				{
					this.OnEmployeeFirstNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeFirstName = value;
					this.SendPropertyChanged("EmployeeFirstName");
					this.OnEmployeeFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeLastName
		{
			get
			{
				return this._EmployeeLastName;
			}
			set
			{
				if ((this._EmployeeLastName != value))
				{
					this.OnEmployeeLastNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeLastName = value;
					this.SendPropertyChanged("EmployeeLastName");
					this.OnEmployeeLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeUserName
		{
			get
			{
				return this._EmployeeUserName;
			}
			set
			{
				if ((this._EmployeeUserName != value))
				{
					this.OnEmployeeUserNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUserName = value;
					this.SendPropertyChanged("EmployeeUserName");
					this.OnEmployeeUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeePassword
		{
			get
			{
				return this._EmployeePassword;
			}
			set
			{
				if ((this._EmployeePassword != value))
				{
					this.OnEmployeePasswordChanging(value);
					this.SendPropertyChanging();
					this._EmployeePassword = value;
					this.SendPropertyChanged("EmployeePassword");
					this.OnEmployeePasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodType")]
	public partial class FoodType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodTypeID;
		
		private string _FoodName;
		
		private int _WeeklyServing;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodTypeIDChanging(int value);
    partial void OnFoodTypeIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnWeeklyServingChanging(int value);
    partial void OnWeeklyServingChanged();
    #endregion
		
		public FoodType()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FoodTypeID
		{
			get
			{
				return this._FoodTypeID;
			}
			set
			{
				if ((this._FoodTypeID != value))
				{
					this.OnFoodTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FoodTypeID = value;
					this.SendPropertyChanged("FoodTypeID");
					this.OnFoodTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyServing", DbType="Int NOT NULL")]
		public int WeeklyServing
		{
			get
			{
				return this._WeeklyServing;
			}
			set
			{
				if ((this._WeeklyServing != value))
				{
					this.OnWeeklyServingChanging(value);
					this.SendPropertyChanging();
					this._WeeklyServing = value;
					this.SendPropertyChanged("WeeklyServing");
					this.OnWeeklyServingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodType_Animal", Storage="_Animals", ThisKey="FoodTypeID", OtherKey="FoodTypeID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.FoodType = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.FoodType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderID;
		
		private string _GenderType;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnGenderTypeChanging(string value);
    partial void OnGenderTypeChanged();
    #endregion
		
		public Gender()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderType", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string GenderType
		{
			get
			{
				return this._GenderType;
			}
			set
			{
				if ((this._GenderType != value))
				{
					this.OnGenderTypeChanging(value);
					this.SendPropertyChanging();
					this._GenderType = value;
					this.SendPropertyChanged("GenderType");
					this.OnGenderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Animal", Storage="_Animals", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private System.Nullable<int> _AnimalID;
		
		private int _AmountPaid;
		
		private System.DateTime _DatePaid;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnAnimalIDChanging(System.Nullable<int> value);
    partial void OnAnimalIDChanged();
    partial void OnAmountPaidChanging(int value);
    partial void OnAmountPaidChanged();
    partial void OnDatePaidChanging(System.DateTime value);
    partial void OnDatePaidChanged();
    #endregion
		
		public Payment()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalID", DbType="Int")]
		public System.Nullable<int> AnimalID
		{
			get
			{
				return this._AnimalID;
			}
			set
			{
				if ((this._AnimalID != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalID = value;
					this.SendPropertyChanged("AnimalID");
					this.OnAnimalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Int NOT NULL")]
		public int AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="DateTime2 NOT NULL")]
		public System.DateTime DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Payment", Storage="_Animal", ThisKey="AnimalID", OtherKey="AnimalID", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._AnimalID = value.AnimalID;
					}
					else
					{
						this._AnimalID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private int _RoomNumber;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRoomNumberChanging(int value);
    partial void OnRoomNumberChanged();
    #endregion
		
		public Room()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumber", DbType="Int NOT NULL")]
		public int RoomNumber
		{
			get
			{
				return this._RoomNumber;
			}
			set
			{
				if ((this._RoomNumber != value))
				{
					this.OnRoomNumberChanging(value);
					this.SendPropertyChanging();
					this._RoomNumber = value;
					this.SendPropertyChanged("RoomNumber");
					this.OnRoomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Animal", Storage="_Animals", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
